{"ast":null,"code":"import { backServer } from \"@/config/axiosConfig\";\nimport { io } from \"socket.io-client\";\nexport default {\n  data() {\n    return {\n      index: -1,\n      id: parseInt(localStorage.getItem(\"id\")),\n      username: localStorage.getItem(\"username\"),\n      user: {},\n      room: [],\n      users: [],\n      connectedUsers: [],\n      newMessage: null,\n      messages: [],\n      socket: null\n    };\n  },\n  created() {\n    this.socketConnect();\n    this.getUsers();\n  },\n  updated() {},\n  beforeDestroy() {\n    this.disconnect();\n  },\n  methods: {\n    isOnline(index) {\n      // console.log(index)\n      // console.log(this.connectedUsers)\n      const online = this.connectedUsers.find(user => user.UserId === index);\n      if (online) return true;\n      return false;\n    },\n    getUsers() {\n      backServer.get(`/getUsers/${this.id}`).then(res => {\n        this.users = [...res.data.user];\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    selectUser(ind) {\n      this.user = this.users.find(user => user.id === ind);\n      this.index = ind;\n      this.joinRoom(ind);\n      this.setRoom(ind);\n      this.getMessages();\n    },\n    socketConnect() {\n      // socket : io.connect(\"http://192.168.43.19:4001\")\n\n      this.socket = io(\"http://127.0.0.1:5000\");\n      this.socket.emit('status', {\n        username: this.username,\n        UserId: this.id\n      });\n      this.socket.on('connectedUser', user => {\n        this.connectedUsers = [...this.connectedUsers, ...user];\n      });\n    },\n    joinRoom(anotherID) {\n      this.socket.emit('join', `${this.id}--with--${anotherID}`);\n    },\n    getMessages() {\n      this.messages = [];\n      backServer.get(`/getMessage/${this.room}`).then(res => {\n        this.messages = [...res.data.msg];\n      });\n      this.socket.on('receiveMessage', message => {\n        this.messages = [...this.messages, message];\n      });\n    },\n    sendMessage() {\n      if (!this.newMessage) return;\n      let msg = {\n        UserId: this.id,\n        msg: this.newMessage,\n        room: this.room\n      };\n      backServer.post('/sendMessage', msg).then(res => {\n        if (res.data.message == 'message stored') {\n          this.socket.emit('sendMessage', res.data.msg);\n          this.messages = [...this.messages, res.data.msg];\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n      this.newMessage = '';\n    },\n    setRoom(id) {\n      let data = new Array(this.id, id);\n      let unique = [...new Set(data)].sort((a, b) => a < b ? -1 : 1);\n      this.room = `${unique[0]}--with--${unique[1]}`;\n    },\n    disconnect() {\n      this.socket.emit('leave', this.id);\n      this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["backServer","io","data","index","id","parseInt","localStorage","getItem","username","user","room","users","connectedUsers","newMessage","messages","socket","created","socketConnect","getUsers","updated","beforeDestroy","disconnect","methods","isOnline","online","find","UserId","get","then","res","catch","err","console","log","selectUser","ind","joinRoom","setRoom","getMessages","emit","on","anotherID","msg","message","sendMessage","post","Array","unique","Set","sort","a","b"],"sources":["src/views/Chat.vue"],"sourcesContent":["<template>\r\n  <section class=\"pt-5\">\r\n    <div class=\"container shadow section-sm rounded min-Height\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-3\">\r\n          <ul class=\"sidenav\" v-for=\"user in users\" :key=\"user.id\">\r\n            <li class=\"d-flex sidelist c-type\" @click=\"selectUser(user.id)\">\r\n              <span :class=\"index == user.id && 'isActive'\">{{\r\n                user.username \r\n              }}</span><div v-if=\"isOnline(user.id)\" class=\"online\"></div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"col-lg-8\">\r\n          <div class=\"mx-5 message\">\r\n\r\n               <!--  -->\r\n               <!-- USER TO CHAT -->\r\n              \r\n                <div v-if=\"user.username\">\r\n                  <div  class=\"rounded-5 shadow p-2 mb-4 \" style=\"height:50px\">\r\n                    <h4 class=\"d-flex \">{{user.username}} <span class=\"mx-4 p-0\" >connected</span></h4>  \r\n                  </div>\r\n                  <!-- CHAT MESSAGE -->\r\n                  <div class=\" rounded-5 mb-3 bg-light \">\r\n                    <ul  class=\"px-3 card-message  list-group  rounded-5 \">\r\n                      \r\n                      <li v-for=\"(message, index) in messages\" :key=\"index\" :class=\"{'mt-4' : index == 0}\" >\r\n                        <p class=\" message-font shadow\" :class=\"[ message.UserId == id ? 'float-end chat-l' : 'chat-r'  ]\">\r\n                          {{ message.msg }}\r\n                          <!-- <small>:{{ message.id}}</small>  -->\r\n                          \r\n                        </p>\r\n                      </li>\r\n                    </ul>\r\n                    <div class=\"search-wrapper  d-sm-flex\">\r\n                      <input id=\"search-by\" name=\"s\" type=\"email\" class=\"form-control form-control-sm\" placeholder=\"Your message here\" style=\"width:100%\" v-model=\"newMessage\" @keypress.enter=\"sendMessage\">\r\n                      <input type=\"submit\" class=\"btn btn-primary btn-sm\" value=\"Send\" @click=\"sendMessage\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n              <div v-else class=\"text-center\">\r\n                <p  class=\"message\" >Choose an user to chat</p>\r\n              </div>\r\n             \r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </section>\r\n</template>\r\n<script>\r\nimport { backServer } from \"@/config/axiosConfig\";\r\nimport { io }  from \"socket.io-client\"\r\n\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      index: -1,\r\n      id: parseInt(localStorage.getItem(\"id\")),\r\n      username: localStorage.getItem(\"username\"),\r\n      user:{},\r\n      room : [],\r\n      users: [],\r\n      connectedUsers: [],\r\n      newMessage: null,\r\n      messages: [],\r\n      socket: null\r\n      \r\n    };\r\n  },\r\n  created() {\r\n    this.socketConnect()\r\n    this.getUsers()\r\n  },\r\n  updated(){\r\n  },  \r\n  beforeDestroy()\r\n  {\r\n      this.disconnect()\r\n  },\r\n  methods: {\r\n    isOnline(index)\r\n    {\r\n      // console.log(index)\r\n      // console.log(this.connectedUsers)\r\n      const online = this.connectedUsers.find((user) => user.UserId === index)\r\n      if(online) return true\r\n\r\n      return false\r\n    },\r\n    getUsers() {\r\n      backServer\r\n        .get(`/getUsers/${this.id}`)\r\n        .then( (res) => {\r\n           this.users =  [...res.data.user];\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    selectUser(ind) {\r\n      this.user = this.users.find((user) => user.id === ind )\r\n      this.index = ind;\r\n      this.joinRoom(ind)\r\n      this.setRoom(ind)\r\n      this.getMessages()\r\n      \r\n    },\r\n    socketConnect(){\r\n      \r\n      // socket : io.connect(\"http://192.168.43.19:4001\")\r\n\r\n      this.socket = io(\"http://127.0.0.1:5000\")\r\n      this.socket.emit('status',{username: this.username, UserId:this.id})\r\n      this.socket.on('connectedUser', (user) => {\r\n        this.connectedUsers = [...this.connectedUsers, ...user]\r\n      })\r\n    },\r\n    joinRoom(anotherID){\r\n      this.socket.emit('join', `${this.id}--with--${anotherID}`)\r\n    },\r\n    getMessages(){\r\n      this.messages = []\r\n      \r\n      backServer.get(`/getMessage/${this.room}`)\r\n      .then(res => {\r\n        this.messages = [...res.data.msg];\r\n\r\n      })\r\n\r\n      this.socket.on('receiveMessage',(message) => {\r\n        this.messages = [...this.messages, message]\r\n      })\r\n    },\r\n    sendMessage()\r\n    {\r\n      if(!this.newMessage) return\r\n\r\n      let msg = {UserId : this.id, msg: this.newMessage, room: this.room}\r\n        backServer.post('/sendMessage',msg)\r\n        .then(res => {\r\n          if(res.data.message == 'message stored'){\r\n            this.socket.emit('sendMessage', res.data.msg)\r\n            this.messages = [...this.messages, res.data.msg]\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err)\r\n        })\r\n      this.newMessage = ''\r\n\r\n    },\r\n    setRoom(id)\r\n    {\r\n      let data = new Array(this.id,id)\r\n      let unique = [...new Set(data)].sort((a, b) => (a < b ? -1 : 1));\r\n\r\n      this.room = `${unique[0]}--with--${unique[1]}`\r\n    },\r\n    disconnect()\r\n    {\r\n      this.socket.emit('leave', this.id)\r\n      this.socket.disconnect()\r\n    },\r\n  },\r\n  \r\n};\r\n</script>\r\n<style scoped>\r\n  .rounded-5{\r\n    border-radius: 5px !important;\r\n  }\r\n  .message{\r\n    position: relative;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 16px;\r\n  }\r\n  .message-font{\r\n    font-size: 13px;\r\n  }\r\n  .min-Height{\r\n\r\n    min-height: 800px;\r\n    max-height: 800px;\r\n  }\r\n  .message-panel{\r\n    min-height: 700px;\r\n    max-height: 700px;\r\n  }\r\n  .card-message{\r\n    min-height: 560px;\r\n    max-height: 560px;\r\n    overflow-y: scroll;\r\n    \r\n  }\r\n  .chat-r{\r\n    \r\n    border-top-right-radius: 15px;\r\n    border-bottom-left-radius: 15px;\r\n    border-bottom-right-radius: 15px;\r\n    background: #cacaca;\r\n    padding-top: 5px;\r\n    padding-bottom: 5px;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    max-width: 300px;\r\n    \r\n  }\r\n  .chat-l{\r\n    \r\n    border-top-left-radius: 15px;\r\n    border-bottom-left-radius: 15px;\r\n    border-bottom-right-radius: 15px;\r\n    background: #ffffff;\r\n    padding-top: 5px;\r\n    padding-bottom: 5px;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    max-width: 300px;\r\n    \r\n  }\r\n  .online{\r\n    position: relative;\r\n    left: 15px;\r\n    top: 20px;\r\n    width: 8px;\r\n    height: 8px;\r\n    border-radius:50px;\r\n    background-color: rgb(3, 173, 26);\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}